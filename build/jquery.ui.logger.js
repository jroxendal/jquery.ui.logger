// Generated by CoffeeScript 1.3.3
(function() {
  var c,
    __slice = [].slice;

  c = typeof console !== "undefined" && console !== null ? console : {
    log: $.noop
  };

  $.widget("spyder.logger", {
    options: {
      level: 0,
      levels: {
        DEBUG: 10,
        INFO: 20,
        WARN: 30,
        ERROR: 40,
        CRITICAL: 50
      }
    },
    _init: function() {
      var inputs, level, val,
        _this = this;
      this.element.addClass("ui-logger").append("<table>");
      inputs = (function() {
        var _ref, _results;
        _ref = this.options.levels;
        _results = [];
        for (level in _ref) {
          val = _ref[level];
          _results.push("<label for='chk_" + level + "'>" + (level.toLowerCase()) + "</label>\n<input type='checkbox' id='chk_" + level + "' checked='checked' data-level='" + level + "'>");
        }
        return _results;
      }).call(this);
      $('<div class="logger-controls">').html(inputs.join("")).appendTo(this.element.change(function(evt) {
        var display, lv;
        lv = _this.options.levels[$(evt.target).data("level")];
        display = $(evt.target).is(":checked") ? "table-row" : "none";
        return _this.element.find(".logger-level-" + lv).css("display", display);
      }));
      this.item_tmpl = _.template('<tr class="logger-item logger-level-<%= level %>">\n  \n  <td class="logger-header"><%= this.getLevelLabel(level).toLowerCase() %></td>\n  <td class="logger-body closed">\n    <%= msg %>\n    \n    <span class="<%= typeof(data) == \'undefined\' ? \'no_data\' : \'\' %> ui-icon ui-icon-circlesmall-plus"></span>\n    <pre class="logger-data"><%= JSON.stringify(data, null, 4) %></pre>\n  </td>\n</div>');
      return $(".ui-icon-circlesmall-plus").live("click", function() {
        return $(this).parent().toggleClass("closed");
      });
    },
    getLevelLabel: function(lvl) {
      var label, lbl, val;
      lbl = ((function() {
        var _ref, _results;
        _ref = this.options.levels;
        _results = [];
        for (label in _ref) {
          val = _ref[label];
          if (val === lvl) {
            _results.push(label);
          }
        }
        return _results;
      }).call(this))[0];
      return lbl || "INFO";
    },
    tmpl: function(data) {
      return $(this.item_tmpl(data));
    },
    log: function(level, msg, data) {
      if (level < this.options.level) {
        return this.element;
      }
      data = !(data instanceof Element) ? data : $("<div>").append(data).html();
      this.tmpl({
        msg: msg,
        level: level,
        data: data
      }).appendTo(this.element);
      return this.element;
    },
    debug: function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.log.apply(this, [this.options.levels.DEBUG].concat(args));
    },
    info: function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.log.apply(this, [this.options.levels.INFO].concat(args));
    },
    warn: function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.log.apply(this, [this.options.levels.WARN].concat(args));
    },
    error: function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.log.apply(this, [this.options.levels.ERROR].concat(args));
    },
    critical: function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.log.apply(this, [this.options.levels.CRITICAL].concat(args));
    }
  });

}).call(this);
